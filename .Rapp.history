for (k in 1:K){ #Loop through the K classes.				#
			cols <- which(indices[,2]==k) #Select the columns of densities_eval for each k val.#
			ghat_num_i[,k] <- apply(densities_eval[,cols],1,prod) * phat[i,k]#
		} #End class loop.
head(ghat_num_i)
k=1
cols <- which(indices[,2]==k)
cols
indices[1:20,]
k=2
cols <- which(indices[,2]==k)
indices[1:20,]
col
cols
k=1
i
phat[i,k]
ghat_num_i[,k] <- apply(densities_eval[,cols],1,prod) * phat[i,k]
k
head(ghat_num_k[,k])
head(ghat_num_i[,k])
col
cols
densities_eval[,cols]
head(densities_eval[,cols])
head(densities_eval[,c(cols)])
c(cols)
k=1
cols <- which(indices[,2]==k)
cols
head(densities_eval[,%in% cols])
head(densities_eval[,c(1,6,11)])
apply(densities_eval[,cols],1,prod)
apply(densities_eval[,cols],2,prod)
densities_eval[,cols]
head(densities_eval[,cols])
a
b
c
apply(cbind(a,b,c),1,prod)
test
apply(test,1,prod)
for (k in 1:K){ #Loop through the K classes.				#
			cols <- which(indices[,2]==k) #Select the columns of densities_eval for each k val.#
			ghat_num_i[,k] <- apply(densities_eval,1,prod) * phat[i,k]#
		}
head(ghat_num_i)
#Store k ghat(x_i) numerator values for ea class.#
		ghat_num_i <- matrix(0,nrow=nrow(df),ncol=K) #
		#Calculate product term by multiplying all J densities together for the class.#
		for (k in 1:K){ #Loop through the K classes.		#
			num_product <- rep(1,nrow(df))#
			for (j in 1:J){#
				num_product <- num_product * densities[[j,k]](df[ ,j+1])#
			}#
			ghat_num_i[,k] <- phat[i,k] * num_product #Calculate numerator for each class.#
		} #End class loop.
head(num_product)
densities <- matrix(list(),nrow=J,ncol=K) #Each row is a feature, each col a class.#
	f_class <- matrix(list(),nrow=J,ncol=K) #Each row is a feature, each col a class.#
	kd <- matrix(list(),nrow=J,ncol=K) #Each row is a feature, each col a class. #
	#Iterate over features and classes.#
	for (j in 1:J){ #
		for (k in 1:K){ #Iterate classes within each feature#
			f_class[[j,k]] <- known[known$class==classes[k],j+1] #Data vals for class/feature.#
				#Note: j+1 since class=1st col in known.#
			kd[[j,k]] <- density(f_class[[j,k]]) #Set up estimated kernel density.#
			#Create density function for class/feature.#
			densities[[j,k]] = function(x){#
				min_den <- quantile(kd[[j,k]]$y, 0.05)#
				de <- approx(kd[[j,k]]$x,kd[[j,k]]$y,x)$y#
				de[is.na(de)] <- min_den#
				return(de)#
				}#
		} #End class loop#
	} #End feature loop
#Store k ghat(x_i) numerator values for ea class.#
		ghat_num_i <- matrix(0,nrow=nrow(df),ncol=K) #
		#Calculate product term by multiplying all J densities together for the class.#
		for (k in 1:K){ #Loop through the K classes.		#
			num_product <- rep(1,nrow(df))#
			for (j in 1:J){#
				num_product <- num_product * densities[[j,k]](df[ ,j+1])#
			}#
			ghat_num_i[,k] <- phat[i,k] * num_product #Calculate numerator for each class.#
		} #End class loop.
head(num_product)
class(densities)
densities[[1,1]]
#Store k ghat(x_i) numerator values for ea class.#
		ghat_num_i <- matrix(0,nrow=nrow(df),ncol=K) #
		#Calculate product term by multiplying all J densities together for the class.#
		for (k in 1:K){ #Loop through the K classes.				#
			cols <- which(indices[,2]==k) #Select the columns of densities_eval for each k val.#
			ghat_num_i[,k] <- apply(densities_eval[,cols],1,prod) * phat[i,k]#
		} #End class loop.
head(g_hat_num_i)
head(ghat_num_i)
j <- sort(rep(1:J,times=K)) #List vector of j indices to loop over.#
	k <- rep(1:K,times=J)		#List vector of k indices to loop over.#
	indices <- data.frame(j=j, k=k) #Set up data frame of all possible index pairs.#
	#Create f_class and kd estimators for each class/feature combo.#
	f_class <- mapply(function(j,k) known[known$class==classes[k],j+1], j,k)#
	kd <- matrix( lapply(f_class,density), nrow=J, ncol=K, byrow=T)#
#
	#Iterate over features and classes to create matrix of density functions.#
	densities <- matrix(list(),nrow=J,ncol=K)#
	densities <- apply(indices,1, function(index) {#
		j = index[1]; k = index[2]#
		densities[[j,k]] = function(x){#
				min_den <- quantile(kd[[j,k]]$y, 0.05)#
				de <- approx(kd[[j,k]]$x,kd[[j,k]]$y,x)$y#
				de[is.na(de)] <- min_den#
				return(de)}#
	  })#
	 densities <- matrix(densities,nrow=J,ncol=K)
class(densities)
densities[[1,1]]
densities <- matrix(list(),nrow=J,ncol=K) #Each row is a feature, each col a class.#
	f_class <- matrix(list(),nrow=J,ncol=K) #Each row is a feature, each col a class.#
	kd <- matrix(list(),nrow=J,ncol=K) #Each row is a feature, each col a class. #
	#Iterate over features and classes.#
	for (j in 1:J){ #
		for (k in 1:K){ #Iterate classes within each feature#
			f_class[[j,k]] <- known[known$class==classes[k],j+1] #Data vals for class/feature.#
				#Note: j+1 since class=1st col in known.#
			kd[[j,k]] <- density(f_class[[j,k]]) #Set up estimated kernel density.#
			#Create density function for class/feature.#
			densities[[j,k]] = function(x){#
				min_den <- quantile(kd[[j,k]]$y, 0.05)#
				de <- approx(kd[[j,k]]$x,kd[[j,k]]$y,x)$y#
				de[is.na(de)] <- min_den#
				return(de)#
				}#
		} #End class loop#
	} #End feature loop
densities
densities[[1,1]]
kd <- matrix( lapply(f_class,density), nrow=J, ncol=K, byrow=T)
kd[[1,1]]
densities <- matrix(list(),nrow=J,ncol=K)#
	densities <- apply(indices,1, function(index) {#
		j = index[1]; k = index[2]#
		densities[[j,k]] = function(x){#
				min_den <- quantile(kd[[j,k]]$y, 0.05)#
				de <- approx(kd[[j,k]]$x,kd[[j,k]]$y,x)$y#
				de[is.na(de)] <- min_den#
				return(de)}#
	  })#
	 densities <- matrix(densities,nrow=J,ncol=K)
densities[[1,1]]
densities <- apply(indices,1, function(index) {#
		j = index[,1]; k = index[,2]#
		densities[[j,k]] = function(x){#
				min_den <- quantile(kd[[j,k]]$y, 0.05)#
				de <- approx(kd[[j,k]]$x,kd[[j,k]]$y,x)$y#
				de[is.na(de)] <- min_den#
				return(de)}#
	  })#
	 densities <- matrix(densities,nrow=J,ncol=K)
densities <- mapply(#
		function(j,k){#
			densities[[j,k]] = function(x){#
				min_den <- quantile(kd[[j,k]]$y, 0.05)#
				de <- approx(kd[[j,k]]$x,kd[[j,k]]$y,x)$y#
				de[is.na(de)] <- min_den#
				return(de)}#
				}, #
				j=j, k=k)
dim(densities)
densities
densities <- matrix(list(),nrow=J,ncol=K)
dim(densities)
test <- mapply(#
		function(j,k){#
			densities[[j,k]] = function(x){#
				min_den <- quantile(kd[[j,k]]$y, 0.05)#
				de <- approx(kd[[j,k]]$x,kd[[j,k]]$y,x)$y#
				de[is.na(de)] <- min_den#
				return(de)}#
				}, #
				j=j, k=k)
test
test <- mapply(#
		function(j,k){#
			densities[[j,k]] = function(x){#
				min_den <- quantile(kd[[j,k]]$y, 0.05)#
				de <- approx(kd[[j,k]]$x,kd[[j,k]]$y,x)$y#
				de[is.na(de)] <- min_den#
				return(de)}#
				}, #
				j=j, k=k,simplify=F)
test <- list()#
	test <- mapply(#
		function(j,k){#
			densities[[j,k]] = function(x){#
				min_den <- quantile(kd[[j,k]]$y, 0.05)#
				de <- approx(kd[[j,k]]$x,kd[[j,k]]$y,x)$y#
				de[is.na(de)] <- min_den#
				return(de)}#
				}, #
				j=j, k=k,simplify=F)
test <- list()#
	test <- mapply(#
		function(j,k){#
			densities[[j,k]] = function(x){#
				min_den <- quantile(kd[[j,k]]$y, 0.05)#
				de <- approx(kd[[j,k]]$x,kd[[j,k]]$y,x)$y#
				de[is.na(de)] <- min_den#
				return(de)}#
				}, #
				j=j, k=k)
dim(test)
length(test)
test
densityfunc <- function(j,k){#
		densities[[j,k]] = function(x){#
				min_den <- quantile(kd[[j,k]]$y, 0.05)#
				de <- approx(kd[[j,k]]$x,kd[[j,k]]$y,x)$y#
				de[is.na(de)] <- min_den#
				return(de)}#
				}#
	}
myDensity = function(x,j,k){#
				min_den <- quantile(kd[[j,k]]$y, 0.05)#
				de <- approx(kd[[j,k]]$x,kd[[j,k]]$y,x)$y#
				de[is.na(de)] <- min_den#
				return(de)}#
	}
myDensity = function(x,j,k){#
				min_den <- quantile(kd[[j,k]]$y, 0.05)#
				de <- approx(kd[[j,k]]$x,kd[[j,k]]$y,x)$y#
				de[is.na(de)] <- min_den#
				return(de)}
myDensity
myDensity = function(j,k){#
		densities[[j,k]] = function(x){#
				min_den <- quantile(kd[[j,k]]$y, 0.05)#
				de <- approx(kd[[j,k]]$x,kd[[j,k]]$y,x)$y#
				de[is.na(de)] <- min_den#
				return(de)}}
myDensity
densities <- mapply(myDensity,j,k)
densities
j
k
j <- sort(rep(1:J,times=K)) #List vector of j indices to loop over.#
	k <- rep(1:K,times=J)
j
k
densities <- mapply(myDensity,j,k)
myDensity = function(j,k){#
		densities = function(x){#
				min_den <- quantile(kd[[j,k]]$y, 0.05)#
				de <- approx(kd[[j,k]]$x,kd[[j,k]]$y,x)$y#
				de[is.na(de)] <- min_den#
				return(de)}#
		return(densities)#
	}
densities <- mapply(myDensity,j,k)
densities
dim(densities)
length(densities)
densities[[1]]
densities <- matrix(densities,nrow=J,ncol=K)
dim(densities)
densities[[1,]]
densities[[1,1]]
densities_eval <- matrix(0,ncol=nrow(indices),nrow=nrow(df))#
	for (i in 1:nrow(indices)){#
		j = indices[i,1]; k = indices[i,2]#
		densities_eval[,i] <- densities[[j,k]](df[ ,j+1])#
	}
dim(densities_eval)
head(densities_eval[1,])
#Vector to store est props for each iter.#
	phat <- matrix(rep(-10,K*(maxiter+1)),nrow=maxiter+1,byrow=T)#
	phat[1,] <- p #Set first phat estimate row to starting value.#
	l <- rep(0,maxiter+2) 	#Store log-likelihoods for each iter.#
	iter <- 1				#Initialize iteration tracker to 1.#
	epsilon <- 0.000001
i
i=1
ghat_num_i <- matrix(0,nrow=nrow(df),ncol=K) #
		#Calculate product term by multiplying all J densities together for the class.#
		for (k in 1:K){ #Loop through the K classes.				#
			cols <- which(indices[,2]==k) #Select the columns of densities_eval for each k val.#
			ghat_num_i[,k] <- apply(densities_eval[,cols],1,prod) * phat[i,k]#
		} #End class loop.
head(ghat_num_i)
denom <- rowSums(ghat_num_i)
head(denom)
ghat <- ghat_num_i / denom
head(ghat)
phat[i+1,] <- colMeans(ghat,na.rm=T)
phat[i+1,]
l[i+1] <- sum(log(phat[i+1,])) + sum(log(densities_eval+epsilon))
l[i+1]
i=1
# g_k(x_i) = {p_k * PRODUCT_j=1toJ(f_jk(x_i))}  / #
		#	{SUM_k=1toK[ p_k * PRODUCT_j=1toJ(f_jk(x_i)) ]}#
		#1. Numerator calculation#
		#Store k ghat(x_i) numerator values for ea class.#
		ghat_num <- matrix(0,nrow=nrow(df),ncol=K) #
		#Calculate product term by multiplying all J densities together for the class.#
		for (k in 1:K){ #Loop through the K classes.				#
			cols <- which(indices[,2]==k) #Select the columns of densities_eval for each k val.#
			ghat_num[,k] <- apply(densities_eval[,cols],1,prod) * phat[i,k]#
		} #End class loop.#
		#2. Denominator calculation#
		denom <- rowSums(ghat_num_i)#
		#3. Put numerator/denominator together to get ghat(x_i) values.#
		ghat <- ghat_num / denom
ghat
dim(ghat)
phat[i+1,] <- colMeans(ghat,na.rm=T)
phat[i+1,]
#2. Denominator calculation#
		ghat_denom <- rowSums(ghat_num)#
		#3. Put numerator/denominator together to get ghat(x_i) values.#
		ghat <- ghat_num / ghat_denom
document()
TIME TESTING:#
system.time(emAllFeatures(known=known,unknown=unknown,p=rep(.2,5),maxiter=1000,conv=.00001))#
system.time(emAllFeatures2(known=known,unknown=unknown,p=rep(.2,5),maxiter=1000,conv=.00001))
em1 <- emAllFeatures(known=known,unknown=unknown,p=rep(.2,5),maxiter=1000,conv=.00001)#
em2 <- emAllFeatures2(known=known,unknown=unknown,p=rep(.2,5),maxiter=1000,conv=.00001)#
#
em1$p#
em2$p
df = unknown			#Initializes unknown data frame.#
	known = known			#Initializes known data frame.#
	K = length(p) 			#Defines number of class proportions.#
	J = ncol(known) - 1 	#Defines number of features (in known set).#
	classes = sort(unique(known$class)) #Defines classes in known set.#
	#Known data frame is used to create estimated densities for each class/feature combo.#
	#Unknown data frame is the data whose class proportions are being estimated.#
	#--------------------------------------#
	### Error Checking inputs:#
	# Error check sum(probs = 1):#
	if (sum(p)!=1) stop("Sum of probabilities must equal 1.")#
	#Error check: First column of known must be 'class'.#
	if (colnames(known)[1] != 'class'){  #
		stop("First column of known data frame must be 'class'.")}#
	#Error check: Length of p must match number of classes in known data set.#
	if (K != length(classes)){  #
		stop("Starting proportion vector length must = number of classes in known data set.")}		#
	#--------------------------------------#
	### Create a JxK matrix of estimated density functions, using known class data.#
	#Setup matricies to hold f_class, kd, and density objects.#
	#Note: To use a matrix of lists, must reference each element as densities[[i,j]]#
	j <- sort(rep(1:J,times=K)) #List vector of j indices to loop over.#
	k <- rep(1:K,times=J)		#List vector of k indices to loop over.#
	indices <- data.frame(j=j, k=k) #Set up data frame of all possible index pairs.#
	#Create f_class and kd estimators for each class/feature combo.#
	f_class <- mapply(function(j,k) known[known$class==classes[k],j+1], j,k)#
	kd <- matrix( lapply(f_class,density), nrow=J, ncol=K, byrow=T)#
#
	#Iterate over features and classes to create matrix of density functions.#
	densities <- matrix(list(),nrow=J,ncol=K)
i
myDensity = function(j,k){#
		densities = function(x){#
				min_den <- quantile(kd[[j,k]]$y, 0.05)#
				de <- approx(kd[[j,k]]$x,kd[[j,k]]$y,x)$y#
				de[is.na(de)] <- min_den#
				return(de)}#
		return(densities)#
	}#
	#Set up the density functions, and format as a JxK matrix.#
	densities <- mapply(myDensity,j,k)#
	densities <- matrix(densities,nrow=J,ncol=K)
dim(densities)
densities[[1,1]]
densities_eval <- matrix(0,ncol=nrow(indices),nrow=nrow(df))#
	for (i in 1:nrow(indices)){#
		j = indices[i,1]; k = indices[i,2]#
		densities_eval[,i] <- densities[[j,k]](df[ ,j+1])#
	}
dim(densities_eval)
densities_eval[,141]
densities_eval[,1]
densities_eval[,2]
densities_eval[,50]
dim(kd)
dim(densities)
#Vector to store est props for each iter.#
	phat <- matrix(rep(-10,K*(maxiter+1)),nrow=maxiter+1,byrow=T)#
	phat[1,] <- p #Set first phat estimate row to starting value.#
	l <- rep(0,maxiter+2) 	#Store log-likelihoods for each iter.#
	iter <- 1				#Initialize iteration tracker to 1.#
	epsilon <- 0.000001 	#Initialize epsilon value (error prevention).
i=1
ghat_num <- matrix(0,nrow=nrow(df),ncol=K) #
		#Calculate product term by multiplying all J densities together for the class.#
		for (k in 1:K){ #Loop through the K classes.				#
			cols <- which(indices[,2]==k) #Select the columns of densities_eval for each k val.#
			ghat_num[,k] <- apply(densities_eval[,cols],1,prod) * phat[i,k]#
		}
head(ghat_num)
ghat_num[1:20,]
dim(densities_eval)
indices
head(indices)
k <- sort(rep(1:K,times=K))
head(k)
k <- sort(rep(1:K,times=J))
k
j <- rep(1:J,times=K)
j
k <- sort(rep(1:K,times=J))#
	j <- rep(1:J,times=K)#
	#j <- sort(rep(1:J,times=K)) #List vector of j indices to loop over.#
	#k <- rep(1:K,times=J)		#List vector of k indices to loop over.#
	indices <- data.frame(j=j, k=k)
head(indices)
indices[1:25,]
f_class <- mapply(function(j,k) known[known$class==classes[k],j+1], j,k)#
	kd <- matrix( lapply(f_class,density), nrow=J, ncol=K, byrow=T)
dim(kd)
rm(densities)
myDensity = function(j,k){#
		densities = function(x){#
				min_den <- quantile(kd[[j,k]]$y, 0.05)#
				de <- approx(kd[[j,k]]$x,kd[[j,k]]$y,x)$y#
				de[is.na(de)] <- min_den#
				return(de)}#
		return(densities)#
	}
densities <- mapply(myDensity,j,k)
length(densities)
dim(densities)
densities[[1]]
densities <- matrix(densities,nrow=J,ncol=K)
densities_eval <- matrix(0,nrow=nrow(indices),ncol=nrow(df))
dim(densities_eval)
densities[[1,1]](df[ ,1+1])
densities_eval <- matrix(0,nrow=nrow(indices),ncol=nrow(df))#
	for (i in 1:nrow(indices)){#
		j = indices[i,1]; k = indices[i,2]#
		densities_eval[i,] <- densities[[j,k]](df[ ,j+1])#
	}
dim(densities_eval)
ghat_num <- matrix(0,nrow=nrow(df),ncol=K)
k
k=1
cols <- which(indices[,2]==k)
cols
densities_eval[,cols]
rows <- which(indices[,2]==k) #Sel
rows
k=2
rows <- which(indices[,2]==k) #Sel
rows
k=1
rows <- which(indices[,2]==k) #Sel
rows
densities_eval[rows,]
head(densities_eval[rows,])
?apply
for (k in 1:K){ #Loop through the K classes.				#
			rows <- which(indices[,2]==k) #Select the columns of densities_eval for each k val.#
			ghat_num[,k] <- apply(densities_eval[rows,],2,prod) * phat[i,k]#
		} #End class loop.
i
i=1
k
for (k in 1:K){ #Loop through the K classes.				#
			rows <- which(indices[,2]==k) #Select the columns of densities_eval for each k val.#
			ghat_num[,k] <- apply(densities_eval[rows,],2,prod) * phat[i,k]#
		} #End class loop.
head(ghat_num)
densities <- matrix(list(),nrow=J,ncol=K) #Each row is a feature, each col a class.#
	f_class <- matrix(list(),nrow=J,ncol=K) #Each row is a feature, each col a class.#
	kd <- matrix(list(),nrow=J,ncol=K) #Each row is a feature, each col a class. #
	#Iterate over features and classes.#
	for (j in 1:J){ #
		for (k in 1:K){ #Iterate classes within each feature#
			f_class[[j,k]] <- known[known$class==classes[k],j+1] #Data vals for class/feature.#
				#Note: j+1 since class=1st col in known.#
			kd[[j,k]] <- density(f_class[[j,k]]) #Set up estimated kernel density.#
			#Create density function for class/feature.#
			densities[[j,k]] = function(x){#
				min_den <- quantile(kd[[j,k]]$y, 0.05)#
				de <- approx(kd[[j,k]]$x,kd[[j,k]]$y,x)$y#
				de[is.na(de)] <- min_den#
				return(de)#
				}#
		} #End class loop#
	} #End feature loop
dim(densities)
densities[[1,1]]
densities_eval <- matrix(0,ncol=nrow(indices),nrow=nrow(df))#
	for (i in 1:nrow(indices)){#
		j = indices[i,1]; k = indices[i,2]#
		densities_eval[,i] <- densities[[j,k]](df[ ,j+1])#
	}
head(densities_eval)
phat <- matrix(rep(-10,K*(maxiter+1)),nrow=maxiter+1,byrow=T)#
	phat[1,] <- p #Set first phat estimate row to starting value.#
	l <- rep(0,maxiter+2) 	#Store log-likelihoods for each iter.#
	iter <- 1				#Initialize iteration tracker to 1.#
	epsilon <- 0.000001 	#Initialize epsilon value (error prevention).
#Store k ghat(x_i) numerator values for ea class.#
		ghat_num <- matrix(0,nrow=nrow(df),ncol=K) #
		#Calculate product term by multiplying all J densities together for the class.#
		for (k in 1:K){ #Loop through the K classes.				#
			cols <- which(indices[,2]==k) #Select the columns of densities_eval for each k val.#
			ghat_num[,k] <- apply(densities_eval[,cols],1,prod) * phat[i,k]#
		} #End class loop.
i
i=1
#Store k ghat(x_i) numerator values for ea class.#
		ghat_num <- matrix(0,nrow=nrow(df),ncol=K) #
		#Calculate product term by multiplying all J densities together for the class.#
		for (k in 1:K){ #Loop through the K classes.				#
			cols <- which(indices[,2]==k) #Select the columns of densities_eval for each k val.#
			ghat_num[,k] <- apply(densities_eval[,cols],1,prod) * phat[i,k]#
		} #End class loop.
head(ghat_num)
ghat_denom <- rowSums(ghat_num)#
		#3. Put numerator/denominator together to get ghat_k(x_i) values.#
		ghat <- ghat_num / ghat_denom
head(ghat)
#p_k = (1/n) * SUM_i=1ton[g_k(x_i)]#
		phat[i+1,] <- colMeans(ghat,na.rm=T)
phat[i+1,]
myDensity = function(idx){#
		j = idx[1]; k=idx[2]#
		densities = function(x){#
				min_den <- quantile(kd[[j,k]]$y, 0.05)#
				de <- approx(kd[[j,k]]$x,kd[[j,k]]$y,x)$y#
				de[is.na(de)] <- min_den#
				return(de)}#
		return(densities)#
	}
?apply
densities <- apply(indices,1,myDensity)
length(densities)
densities[[1]]
rm(densities)
#Iterate over features and classes to create matrix of density functions.#
	densities <- matrix(list(),nrow=J,ncol=K)#
	for (i in 1:nrow(indices)){#
		j = indices[i,1]; k = indices[i,2]#
		#Create density function for class/feature.#
		densities[[j,k]] = function(x){#
			min_den <- quantile(kd[[j,k]]$y, 0.05)#
			de <- approx(kd[[j,k]]$x,kd[[j,k]]$y,x)$y#
			de[is.na(de)] <- min_den#
			return(de)#
			}#
	}
dim(densities)
densities[[1,1]]
densities_eval <- matrix(0,ncol=nrow(indices),nrow=nrow(df))#
	for (i in 1:nrow(indices)){#
		j = indices[i,1]; k = indices[i,2]#
		densities_eval[,i] <- densities[[j,k]](df[ ,j+1])#
	}
densities_eval[[1,1]]
head(densities_eval)
document()
em1 <- emAllFeatures(known=known,unknown=unknown,p=rep(.2,5),maxiter=1000,conv=.00001)#
em2 <- emAllFeatures2(known=known,unknown=unknown,p=rep(.2,5),maxiter=1000,conv=.00001)#
#
em1$p#
em2$p
system.time(emAllFeatures(known=known,unknown=unknown,p=rep(.2,5),maxiter=1000,conv=.00001))#
system.time(emAllFeatures2(known=known,unknown=unknown,p=rep(.2,5),maxiter=1000,conv=.00001))
#Estimate unknown class proportions for entire data set (using all features) with EM algorithm.#
em <- emAllFeatures2(known=known,unknown=unknown,p=rep(.2,5),maxiter=1000,conv=.00001)#
p_prime_hat <- em$p#
#
# Calculate actual mixing proportions for known data set.	#
ACTUAL_MIXING_PROPS_KNOWN <- calcProps(known)#
#
# Calculate actual mixing proportions for unknown data set, if classes are included.#
if ('class' %in% names(unknown)){ ACTUAL_MIXING_PROPS_UNKNOWN <- calcProps(unknown)}#
#
#Plot estimates versus actual unknown class proportions.#
plot(ACTUAL_MIXING_PROPS_UNKNOWN,col='black',pch=19)#
points(p_prime_hat,col='blue',pch=19)
em
est_mixing_props <- matrix(0,nrow=J,ncol=K,dimnames=list(feature_names,classes)) #
feature_MSEs <- feature_iter <- rep(0,J) #Set up vectors to hold MSE and iteration data.#
feature_log <- list();	#Set up list to hold vectors of log-likelihood function values.#
#
for (j in 1:J){ #Loop through features.#
	#Create two temp data sets, with just class columns and a single feature.#
	temp_known <- known[ ,c(1,j+1)]#
	temp_unknown <- unknown[ ,c(1,j+1)]#
	#Call EM algorithm for each feature.#
	temp_em <- emAllFeatures(known=temp_known,unknown=temp_unknown,p=rep(.2,5),maxiter=1000,conv=.00001)#
	print(j)#
	#Save EM algorithm output for each feature.#
	est_mixing_props[j,] <- temp_em$p; 	#
	feature_MSEs[j] <- temp_em$mse#
	feature_iter[j] <- temp_em$iter; 	#
	feature_logl[[j]] <- temp_em$logl	#
}
est_mixing_props <- matrix(0,nrow=J,ncol=K,dimnames=list(feature_names,classes)) #
feature_MSEs <- feature_iter <- rep(0,J) #Set up vectors to hold MSE and iteration data.#
feature_logl <- list();	#Set up list to hold vectors of log-likelihood function values.#
#
for (j in 1:J){ #Loop through features.#
	#Create two temp data sets, with just class columns and a single feature.#
	temp_known <- known[ ,c(1,j+1)]#
	temp_unknown <- unknown[ ,c(1,j+1)]#
	#Call EM algorithm for each feature.#
	temp_em <- emAllFeatures(known=temp_known,unknown=temp_unknown,p=rep(.2,5),maxiter=1000,conv=.00001)#
	print(j)#
	#Save EM algorithm output for each feature.#
	est_mixing_props[j,] <- temp_em$p; 	#
	feature_MSEs[j] <- temp_em$mse#
	feature_iter[j] <- temp_em$iter; 	#
	feature_logl[[j]] <- temp_em$logl	#
}
sys.time()
Sys.time()
Sys.time()#
est_mixing_props <- matrix(0,nrow=J,ncol=K,dimnames=list(feature_names,classes)) #
feature_MSEs <- feature_iter <- rep(0,J) #Set up vectors to hold MSE and iteration data.#
feature_logl <- list();	#Set up list to hold vectors of log-likelihood function values.#
#
for (j in 1:J){ #Loop through features.#
	#Create two temp data sets, with just class columns and a single feature.#
	temp_known <- known[ ,c(1,j+1)]#
	temp_unknown <- unknown[ ,c(1,j+1)]#
	#Call EM algorithm for each feature.#
	temp_em <- emAllFeatures(known=temp_known,unknown=temp_unknown,p=rep(.2,5),maxiter=1000,conv=.00001)#
	print(j)#
	#Save EM algorithm output for each feature.#
	est_mixing_props[j,] <- temp_em$p; 	#
	feature_MSEs[j] <- temp_em$mse#
	feature_iter[j] <- temp_em$iter; 	#
	feature_logl[[j]] <- temp_em$logl	#
}#
Sys.time()
em_by_feature <- list(est_mixing_props=est_mixing_props, feature_MSEs=feature_MSEs,#
	feature_iter=feature_iter, feature_logl=feature_logl)
est_mixing_props
#Name elements for the EM algorithm output:#
rownames(est_mixing_props) <- feature_names; colnames(est_mixing_props) <- classes;#
names(feature_MSEs) <- feature_names#
names(feature_iter) <- feature_names #
names(feature_log) <- feature_names#
#Visualize estimates for mixing proportions for linear set.#
par(mfrow=c(3,2))#
for (k in 1:K){#
	hist(est_mixing_props[,k],main=paste('Estimated mixing proportion pi_',k))#
	abline(v=ACTUAL_MIXING_PROPS_UNKNOWN[k],lwd=2,col='blue')	#
}
names(feature_iter) <- feature_names #
names(feature_logl) <- feature_names
temp_known_list <- lapply(seq(1:J), function(j) known[ ,c(1,j+1)])
length(temp_known_list)
head(temp_known_list[[1]])
head(temp_known_list[[2]])
head(temp_known_list[[141]])
temp_unknown_list <- lapply(seq(1:J), function(j) unknown[ ,c(1,j+1)])
head(temp_unknown_list[1,])
head(temp_unknown_list[[1]])
temp_em_list <- lapply(seq(1:J),#
	function(j){#
		temp_em <- emAllFeatures(known=temp_known[[j]],#
			unknown=temp_unknown[[j]],p=rep(.2,5),maxiter=1000,conv=.00001)	#
	})
temp_em_list <- lapply(seq(1:J),#
	function(j){#
		temp_em <- emAllFeatures(known=temp_known[[j]],#
			unknown=temp_unknown[[j]],p=rep(.2,5),maxiter=1000,conv=.00001)#
		return(temp_em)		#
	})
temp_em_list <- lapply(seq(1:J),#
	function(j){#
		temp_em <- emAllFeatures(known=temp_known_list[[j]],#
			unknown=temp_unknown_list[[j]],p=rep(.2,5),maxiter=1000,conv=.00001)#
		return(temp_em)		#
	})
document()
git push -u origin master
git push -u varstar varstar-package
cd '/Users/jennstarling/TAMU/STAT 685 (Astronomy Group)/varstar_package/varstar'
git push origin varstar
git remote -v
